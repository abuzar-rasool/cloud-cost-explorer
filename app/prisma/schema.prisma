generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OnDemandVMPricing {
  id                 Int      @id @default(autoincrement())
  vm_name            String
  provider_name      Provider
  virtual_cpu_count  Int
  memory_gb          Float
  cpu_arch           String
  price_per_hour_usd Float
  gpu_count          Int
  gpu_name           String?
  gpu_memory         Float
  os_type            OS_Type
  region             Region
  other_details      Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([cpu_arch(ops: raw("gin_trgm_ops"))], map: "idx_vm_cpu_arch_gin", type: Gin)
  @@index([virtual_cpu_count], map: "idx_vm_cpu_count")
  @@index([gpu_name(ops: raw("gin_trgm_ops"))], map: "idx_vm_gpu_name_gin", type: Gin)
  @@index([memory_gb], map: "idx_vm_memory")
  @@index([vm_name(ops: raw("gin_trgm_ops"))], map: "idx_vm_name_gin", type: Gin)
  @@index([os_type, price_per_hour_usd], map: "idx_vm_os_price")
  @@index([os_type], map: "idx_vm_os_type")
  @@index([price_per_hour_usd], map: "idx_vm_price")
  @@index([price_per_hour_usd, virtual_cpu_count, memory_gb], map: "idx_vm_price_cpu_memory")
  @@index([provider_name], map: "idx_vm_provider_name")
  @@index([provider_name, os_type], map: "idx_vm_provider_os")
  @@index([provider_name, price_per_hour_usd], map: "idx_vm_provider_price")
  @@index([provider_name, region], map: "idx_vm_provider_region")
  @@index([provider_name, region, os_type], map: "idx_vm_provider_region_os")
  @@index([provider_name, region, price_per_hour_usd], map: "idx_vm_provider_region_price")
  @@index([region], map: "idx_vm_region")
  @@index([region, os_type, price_per_hour_usd], map: "idx_vm_region_os_price")
  @@index([region, price_per_hour_usd], map: "idx_vm_region_price")
  @@map("on-demand-vm-pricing")
}

model StoragePricing {
  id              Int          @id @default(autoincrement())
  provider_name   Provider
  service_name    String
  storage_class   String
  region          Region
  access_tier     Access_Tiers
  capacity_price  Float?
  read_price      Float?
  write_price     Float?
  flat_item_price Float?
  other_details   Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([access_tier], map: "idx_storage_access_tier")
  @@index([capacity_price], map: "idx_storage_capacity_price")
  @@index([storage_class], map: "idx_storage_class")
  @@index([storage_class(ops: raw("gin_trgm_ops"))], map: "idx_storage_class_gin", type: Gin)
  @@index([storage_class, capacity_price], map: "idx_storage_class_price")
  @@index([capacity_price, storage_class, access_tier], map: "idx_storage_price_class")
  @@index([provider_name, storage_class], map: "idx_storage_provider_class")
  @@index([provider_name, storage_class, access_tier], map: "idx_storage_provider_class_tier")
  @@index([provider_name], map: "idx_storage_provider_name")
  @@index([provider_name, region], map: "idx_storage_provider_region")
  @@index([provider_name, region, storage_class], map: "idx_storage_provider_region_class")
  @@index([provider_name, region, access_tier], map: "idx_storage_provider_region_tier")
  @@index([provider_name, access_tier], map: "idx_storage_provider_tier")
  @@index([region], map: "idx_storage_region")
  @@index([region, storage_class, capacity_price], map: "idx_storage_region_class_price")
  @@index([region, capacity_price], map: "idx_storage_region_price")
  @@index([service_name(ops: raw("gin_trgm_ops"))], map: "idx_storage_service_name_gin", type: Gin)
  @@index([access_tier, capacity_price], map: "idx_storage_tier_price")
  @@map("storage-pricing")
}

enum Provider {
  AWS
  AZURE
  GCP
}

enum OS_Type {
  LINUX
  WINDOWS
  OTHER
}

enum Region {
  north_america
  south_america
  europe
  asia
  africa
  oceania
  antarctica
}

enum Access_Tiers {
  FREQUENT_ACCESS
  OCCASIONAL_ACCESS
  RARE_ACCESS
  ARCHIVE
}
